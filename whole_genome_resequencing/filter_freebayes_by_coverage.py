#!/usr/bin/python


# Author: cbortoluzzi@ethz.ch


import argparse


parser = argparse.ArgumentParser(description = 'Filter genotype outliers in VCF file using genome coverage information')
parser.add_argument('--vcf', help = 'VCF file generated by Freebayes')



class FilterVCF:

	def __init__(self):
		# Dictionary with average genome coverage for each sample included in the VCF
		self.mydict = {'WISENTF_Lupita': 36.69, 'WISENTF_Uranda': 35.47, 'WISENTM_Enrik': 37.64, 'WISENTM_Urim': 46.37, 'WISENTM_Urano': 39.22, 
		'WISENT_Langnau': 39.74, 'BBO_3569': 7.87, 'BBO_3574': 9.27, 'American_bison_1': 28.56, 'American_bison_2': 27.81, 'American_bison_3': 28.59, 
		'American_bison_4': 21.06, 'Angus': 11.22, 'Hereford': 10.53, 'Charolais': 13.01, 'Holstein': 11.93, 'Water_buffalo': 11.78}


	def filter_genotypes_by_coverage(self, vcf_f, output_f):
		with open(vcf_f, 'rt') as file, open(output_f, 'w') as out:
			for line in file:
				if line.startswith('##'):
					out.write('{}'.format(line))
				elif line.startswith('#'):
					out.write('{}'.format(line))
					header = line.strip().split()
					species_list = header[9:]
					index = [i for i in range(0, len(species_list))]
				else:
					list_g = []
					vcf_info = line.strip().split()
					species_info = vcf_info[9:]
					for i,j in enumerate(species_info):
						if j == '.':
							genotype = '.:.:.:.:.:.:.'
							list_g.append(genotype)
						else:
							depth = j.split(':')[1]
							species_name = species_list[i]
							species_cov = self.mydict[species_name]
							if int(depth) < (1/3) * species_cov:
								genotype = '.:.:.:.:.:.:.'
								list_g.append(genotype)
							elif int(depth) > 2.5 * species_cov:
								genotype = '.:.:.:.:.:.:.'
								list_g.append(genotype)
							else:
								genotype = j
								list_g.append(genotype)
					new_genotypes = '\t'.join(map(str, list_g))
					new_vcf = '\t'.join(map(str, vcf_info[0:9]))
					out.write('{}\t{}\n'.format(new_vcf, new_genotypes))


if __name__ == '__main__':
	args = parser.parse_args()
	output_f = args.vcf.replace('.vcf', '.fgeno.vcf')
	filter_vcf = FilterVCF()
	filter_vcf.filter_genotypes_by_coverage(args.vcf, output_f)

